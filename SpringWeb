1. 스프링 웹 MVC
• 스프링이 제공하는 웹 애플리케이션 개발 전용 프레임워크
• MVC(모델(Model)-뷰(View)-컨트롤러(Controller)) 패턴을 사용
• 웹 애플리케이션의 모델, 뷰, 컨트롤러 사이의 의존 관계를 스프링 컨테이 너가 관리
• 스프링이 제공하는 많은 기능을 확장하여 웹 애플리케이션 구축이 가능

(1) 프런트 컨트롤러
• 애플리케이션의 흐름을 관리
• Spring Framework의 DispatcherServlet

(2) 모델(Model)
• 애플리케이션의 데이터가 들어 있는 객체

(3) 컨트롤러(Controller)
• 애플리케이션의 비즈니스 로직을 포함하는 자바 클래스
• @Controller

(4) 뷰(View)
• 모델의 정보(데이터)를 특정 형식에 맞게 표현
• JSP, Thymeleaf, Freemarker, ...

2. 스프링 웹 MVD의 기본 구성

(1) 디스패처서블릿 (DispatcherServlet)
웹으로부터 요청을 전달받음.
요청을 컨트롤러에 전달하고, 컨트롤러가 반환한 결과 값을 뷰에 전달하여 사용자에 게 보여줄 응답을 생성 하는 등의 모든 절차(흐름)를 담당.

(2) 핸들러 매핑 (HandlerMapping)
클라이언트의 요청 URL에 대해 어떤 컨트롤러가 처리할지를 결정.

(3) 핸들러 어댑터 (HandlerAdapter)
핸들러 매핑 클래스에 의해 결정된 컨트롤러를 호출.

(4) 컨트롤러 (Controller)
클라이언트의 요청을 처리한 뒤 결과를 반환.
응답 결과에서 보여줄 데이터를 모델에 담아서 뷰로 전달.

(5) 모델 & 뷰 (ModelAndView)
컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담는 객체.

(6) 뷰 리졸버 (ViewResolver)
컨트롤러의 처리 결과를 사용자에게 보여줄 뷰를 결정.

(7) 뷰 (View)
컨트롤러의 처리 결과 화면을 생성.
JSP를 비롯한 다양한 뷰 템플릿 엔진이 사용됨.
클라이언트에 요청 처리 결과를 전송.

3. 뷰 템플릿 엔진(View Template Engine)
• 개발자가 템플릿을 정의할 수 있는 소프트웨어 구성요소
• 템플릿은 동적 콘텐츠에 대한 위치 표시자가 있는 HTML 또는 XML로 개발됨
• 형식과 구조가 정해진 동적 웹 페이지를 생성

