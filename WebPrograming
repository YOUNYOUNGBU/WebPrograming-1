1. Java의 역사
• 썬 마이크로시스템즈의 제임스 고슬링 팀에서 개발한 객체지향 프로그래밍 언어
• 1991년 그린 프로젝트라는 이름으로 시작해 1995년 발표됨
• 초기 가전제품에 탑재해 동작하는 프로그램을 위해 개발됨
• 현재 웹 애플리케이션 서버 분야에서 많이 사용됨
• 2009 ~ 2010년 Oracle이 썬 마이크로시스템즈를 인수하면서 소유권이 Oracle로 이전됨
• 2012년 Android에서 Java API 사용 관련 Oracle과 Google간의 분쟁 발생
• 2016년 1월 Oracle은 JDK9 기반 Java 런타임 환경에서 브라우저 플러그인(Applet)을 중단
• 2017년 9월 Oracle은 Java EE를 Eclipse Foundation에 제출함
• Eclipse Foundation은 javax 및 java 상표 사용에 Oracle과 합의 실패
• javax 및 java 상표를 사용하지 못해 Jakarta EE로 명칭 및 패키지명 변경
• Java EE는 버전 8까지 지원

2. Spring Framework
• 대규모 자바 애플리케이션 개발을 신속하고 편리하게 해주는 오픈 소스 프레임워크
• '스프링 프레임워크' 또는 줄여서 '스프링'이라고도 함
• '스프링'은 Spring Framework 생태계 전체를 의미하기도 함
• Spring의 의미
• EJB(겨울)의 복잡성을 극복한 새로운 세대의 기술이라는 의미로 봄 (Spring)을 의미함
• 필요에 따라 쉽게 확장이 가능해 탄력적이라는 의미를 담고 있음
• 스프링을 사용하는 이유
• 개발의 복잡함을 제거하면서 엔터프라이즈급 개발할 수 있는 경량 오픈소스 프레임워크
• 스프링은 동적인 웹 사이트를 개발을 지원하는 여러 서비스를 제공
• 웹 애플리케이션을 훨씬 효율적으로 구현할 수 있어 생산성과 품질이 우수
• 개발 이후에는 유지보수의 해결책도 제시해 줌

3. Spring Framework 특징
• 일반적인 자바 객체를 위한 POJO 지원
• 객체 간의 결합도를 줄이는 의존성 주입(DI) 지원
• 공통 모듈을 재사용하기 위한 AOP 지원
• 일관성 있는 모듈의 트랜잭션 지원
• 전자정부 표준 프레임워크의 기반 기술

4. POJO(Plain Old Java Object)
• 별도의 API를 사용하여 어떠한 제한 받지 않는 자바 클래스
• 특화된 인터페이스를 반드시 구현하거나 의존성이 높은 클래스의 확장을 따라야 할 필요가 없음

5. OJO 지원의 장점
• 코드가 훨씬 단순해짐
• 개발 후 특정 데이터베이스나 서버 없이도 테스트를 할 수 있어서 개발 속도가 빠름
• POJO는 프레임워크의 규약이나 규제가 없어서 매우 자유롭게 객체 지향적으로 설계할 수 있음

6. 의존성 주입(Dependency Injection )
• 객체 간의 관계를 관리할 때 사용하는 기법
• 객체 또는 구성 요소 사이의 의존 관계를 직접 생성하거나 제어하지 않음
• 외부의 빈(Bean) 설정 파일 또는 어노테이션(Annotation)을 활용해 스프 링 컨테이너가 자동으로 연결해주는 방식

7. 의존성 주입의 장점
• 객체 간의 의존 관계를 직접 생성하거나 제어하지 않아도 됨
• 설정 파일을 통해서 스프링 컨테이너가 자동적으로 객체를 연결함
• 코드가 간단해지고 이해하기 쉬우며 테스트가 용이함
• 보다 쉬운 프로그램 설계가 가능
• 이미 개발된 프로그램을 변경해야 할 때도 변경 사항을 적용하기가 쉬워 확장성이 매우 좋음
• 각 객체 간의 의존 관계와 객체들의 생명 주기를 간편하게 개발하거 나 유지보수 할 수 있음

8. 관점 지향 프로그래밍(AOP, Aspect Oriented Programming)
• 핵심적인 기능에서 부가적인 공통 관심사를 분리하여 공통 모듈로 만들어서 설계하고 개발하는 방법
• 반복적으로 나타나는 공통 관심사(Cross-Cutting Concerns)를 분리하여 설계 및 관리 가능

9. AOP 지원의 장점
• 애플리케이션 전체에 사용되는 핵심 기능을 소스코드와 분리하여 재 사용 가능
• 개발자는 비즈니스 기능만 구현하기 때문에 개발 과정이 간소화됨
• 공통 모듈을 각 독립된 모듈로 중복 없이 작성할 수 있음
• 공통 모듈을 XML 설정 파일에 설정 가능

10. 트랜잭션이란
• 쪼갤 수 없는 최소 작업 단위
• 어떤 작업을 하나로 묶어 실행할 때 하나의 작업이라도 실패하면 모두 실패 처리를, 모두 성공하면 성공으로 처리

11. 스프링에서 지원하는 트랜잭션
• 데이터베이스 연동 기술과 트랜잭션 서비스 사이의 종속성을 제거
• 트랜잭션 처리를 위한 일관된 방법을 제공

12. 일관성 있는 모듈의 트랜잭션 지원의 장점
• 트랜잭션 추상 계층을 이용하면 데이터베이스 연동 기술과 상관없이 같은 방식으로 트랜잭션 기능을 활용가능
• 트랜잭션 서비스의 종류나 환경이 바뀌더라도 트랜잭션을 사용하는 코드는 그대로 유지하는 유연성도 제공

